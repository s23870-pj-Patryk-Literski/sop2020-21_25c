
Procesy 

Program który przedstawia numer pid i Ppid:

#include<stdio.h>
#include<unistd.h>

int main(){

 
  printf("Pid: %d\t Ppid: %d\n",getpid(),getppid());
        return 0;

}

Program który przedstawia numer pid i Ppid i czeka na dane od użytkownika "


#include<stdio.h>
#include<unistd.h>

int main(){

  int x;
  printf("Pid: %d\t Ppid: %d\n",getpid(),getppid());
  scanf("%d",&x);
        return 0;

}

Program który przedstawia numer pid i Ppid i czeka na dane od użytkownika " zamknij proces za pomocą komedy kill:


#include<stdio.h>
#include<unistd.h>

int main(){

  int x;
  printf("Pid: %d\t Ppid: %d\n",getpid(),getppid());
  scanf("%d",&x);
        return 0;

}

Używam komendy ps, sprawdzam numer pid używam komendy kill

Program, który uruchomi podproces za pomocą komendy fork, niech proces rodzica oczekuje na proces potomka :

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>

int main(){

  pid_t pid = fork();
 
  printf("Pid: %d\t Ppid: %d\n",getpid(),getppid());
  if(pid>0)
  {
        wait(NULL);
        printf("Koniec czekania \n");
  }

 return 0;
}

Program któ©y oblicza w dwóch procesach: Rodzic wartość sumy liczb od zera do podanej w argumencie, Potomek wypisuje liczby nieparzyste do podanej liczby:


#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>
int main(int argc, char **argv){
  
  int liczby=atoi(argv[1]);     
  pid_t pid = fork();
 
  printf("Pid: %d\t Ppid: %d\n",getpid(),getppid());
  if(pid>0)
  {     
        int suma=0;
        int i;
        for( i=0; i<=liczby ; i++)
        {
                suma +=i;
        }
        wait(NULL);
        printf("suma:  %d\n",suma);
  }
  else
  {
    int i;
    for(i=1; i<=liczby; i+=2)
    { 
            printf("Nieparzysta %d\n",i);
    }        
  }

 return 0;
}

Program który uruchomi 100 procesów, tak że każdy potomek stworzy potomka:


#include<unistd.h>
#include<stdio.h>
#include<sys/wait.h>
#include<stdlib.h>

int main(int argc ,char **argv){

         int i;
         for(i=0; i<100; i++)
         {      
                 pid_t pid = fork();
                if(pid == 0)
                {
                        printf("%d Pid: %d\t  Ppid: %d\n",i,getpid(),getppid());
                }
                else{
                        wait(NULL);
                
                        printf("%d Rodzic już nie czeka\t Pid: %d\n",i,getpid());
                        break;

                }
         }
        return 0;

}

Program, który stworzy jednego rodzica i ten rodzic ma 100 potomków:


#include<unistd.h>
#include<stdio.h>
#include<sys/wait.h>
#include<stdlib.h>

int main(int argc ,char **argv){

         int i;
         pid_t masterpid = getpid();
         for(i=0; i<100; i++)
         {      
                 if(masterpid == getpid())
                {
                         pid_t pid = fork();
                        if(pid == 0)
                        {
                                printf("%d Pid: %d\t  Ppid: %d\n",i,getpid(),getppid());
                                fflush(stdout);
                
                                }
                        }
         }
         if(masterpid = getpid())
         {
                 wait(NULL);
                 printf("Koniec czekania\n");
                 fflush(stdout);

         }

        return 0;

}
 
Drzewko procesów:


#include<unistd.h>
#include<stdio.h>
#include<sys/wait.h>
#include<stdlib.h>

int main(int argc ,char **argv){

         int i;
         for(i=0; i<3; i++)
         {      
                 pid_t pid = fork();
                if(pid == 0)
                {
                        printf("%d Pid: %d\t  Ppid: %d\n",i,getpid(),getppid());
                }
                else
                {
                        wait(NULL);
                }
         }
        return 0;

}


