SignalHandler:

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void signalHandler(int);

int main(){

    int x=1;


        while(x!=0){
                signal(SIGINT,&signalHandler);
          printf("podaj 0 zero zeby wyjsc \t");

          scanf("%d",&x);
        }
        return 0;
}
 void signalHandler(int s){

    printf("błąd nie wyjdziesz %d\n",s);
 }

Opis funkcji od strony serwera :

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(char *msg){  /*funkcja wyswietla komunikat o błędzie na stderr i przerywa program */ 
        perror(msg);
        exit(1);
}

int main(int argc, char *argv[]){

        int sockfd, newsockfd, portno, clilen; /*zmienne sockfd, newsockfd przechowują wartości zwrócone przez wywołąnie systemowe gniazda i wywołanie Accept . Portno przechowuje numer portu. Clilen przechowuje rozmiar adrsu klienta*/
        char buffer[256];    /*Serwer odczytuje znaki z połączenia gniazda do buffora */
        struct sockaddr_in serv_addr, cli_addr;  /*sockaddr_in struktura zawierająca adres internetowy,zmienna serv_addr zawiera adres serwera cli_addr, adrs klienta który łączy sie z serwerem  */
        int n;
        if (argc<2){                              /*użytkownik jako argument musi pdoać numer portu, na którym serwer będzie akceptował połączenia, jeśli tego nie zrobi wyskoczy błąd */
                fprintf(stderr,"Error no port\n");
                exit(1);
        }
        sockfd = socket(AF_INET, SOCK_STREAM, 0);  /*socket() tworzy nowe gniazdo, Pierwszy argument to domena adresowa gniazda,AF_INET to domena internetowa, Drugi argument to typ gniazda, trzeci argument to protokół*/
        if(sockfd<0){                              /* Jeśli wywołanie gnaizda nie powiedzie sie socket() zwróci -1*/
                error("error opening sokcet");
        }
        bzero((char *) &serv_addr, sizeof(serv_addr));  /*funkcja bzero ustawia wszystkie wartosci w buforze na 0, Pierweszy argument to wskaźnik do bufora a drugi to rozmiar bufora, a drugi to rozmiar buffora, inicjalizuje serv_addr 0 */
        portno = atoi(argv[1]);  /* Numer portu*/
        serv_addr.sin_family = AF_INET; /*Zmienna serv_addr jest strukturą typu sockaddr_in, ma ona cztery pola. 1 pole to sin_family,któ©e zawiera kod rodziny adresów, ustawiona jest na stałą AF_INET*/
        serv_addr.sin_addr.s_addr = INADDR_ANY;  /*To pole zawiera adres IP hosta*/
        serv_addr.sin_port = htons(portno);  /*sin_port zawiera numer portu, funkcja htons konwertuje numer portu w kolejnosci bajtów hosta na numer portu w sieciowej kolejnosci bajtów */ 
        if(bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))<0){  
                error("ERROR on binding");                      /*Bind() wiąże gniazdo z adresem bieżącego hosta i numerem portu, na którym będzie działał serwer, Przyjmuje 3 argumenty: Deskryptor pliku gniazda,adres,rozmiar Adresu*/
        }       
        listen(sockfd,5);  /*Listen umożliwia procesowi nasłuchiwanie w gnieżdzie połączeń, 1 argument to deskryptor gniazda, a drugi to liczba połączeń które mogą czekać podczas gdy proces obsługuje dane połączenie*/
        clilen = sizeof(cli_addr);
        newsockfd = accept(sockfd,(struct sockaddr *)  &cli_addr, &clilen);  /*Accept() powoduje, że proces jest blokowany dopóki klient nie połączy sie z serwerem,1 argumetn to Deskryptor,2 wksaźnik odniesienia do adresu klienta*/
        if(newsockfd<0){
                     error("ERROR on accept");
        }
         bzero(buffer,256);     /*kod inicjuje bufor za pomocą bzero,a następnie odczytuje z gniazda, wywołanie read używa nowego deskryptora pliku*/
         n = read (newsockfd,buffer,255);
         if (n< 0 ){
                  error("ERROR reading from socket");
         }
         printf("Here is the message %s\n",buffer);     /*Po nawiązaniu połączenia oba końce mogą odczytywać i zapisywać połączenie*/
          n = write(newsockfd,"i got your message ",18);
           if (n< 0 ){
                  error("ERROR writning to socket ");
         }
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(char *msg){  /*funkcja wyswietla komunikat o błędzie na stderr i przerywa program */ 
        perror(msg);
        exit(1);
}

int main(int argc, char *argv[]){

        int sockfd, newsockfd, portno, clilen; /*zmienne sockfd, newsockfd przechowują wartości zwrócone przez wywołąnie systemowe gniazda i wywołanie Accept . Portno przechowuje numer portu. Clilen przechowuje rozmiar adrsu klienta*/
        char buffer[256];    /*Serwer odczytuje znaki z połączenia gniazda do buffora */
        struct sockaddr_in serv_addr, cli_addr;  /*sockaddr_in struktura zawierająca adres internetowy,zmienna serv_addr zawiera adres serwera cli_addr, adrs klienta który łączy sie z serwerem  */
        int n;
        if (argc<2){                              /*użytkownik jako argument musi pdoać numer portu, na którym serwer będzie akceptował połączenia, jeśli tego nie zrobi wyskoczy błąd */
                fprintf(stderr,"Error no port\n");
                exit(1);
        }
        sockfd = socket(AF_INET, SOCK_STREAM, 0);  /*socket() tworzy nowe gniazdo, Pierwszy argument to domena adresowa gniazda,AF_INET to domena internetowa, Drugi argument to typ gniazda, trzeci argument to protokół*/
        if(sockfd<0){                              /* Jeśli wywołanie gnaizda nie powiedzie sie socket() zwróci -1*/
                error("error opening sokcet");
        }
        bzero((char *) &serv_addr, sizeof(serv_addr));  /*funkcja bzero ustawia wszystkie wartosci w buforze na 0, Pierweszy argument to wskaźnik do bufora a drugi to rozmiar bufora, a drugi to rozmiar buffora, inicjalizuje serv_addr 0 */
        portno = atoi(argv[1]);  /* Numer portu*/
        serv_addr.sin_family = AF_INET; /*Zmienna serv_addr jest strukturą typu sockaddr_in, ma ona cztery pola. 1 pole to sin_family,któ©e zawiera kod rodziny adresów, ustawiona jest na stałą AF_INET*/
        serv_addr.sin_addr.s_addr = INADDR_ANY;  /*To pole zawiera adres IP hosta*/
        serv_addr.sin_port = htons(portno);  /*sin_port zawiera numer portu, funkcja htons konwertuje numer portu w kolejnosci bajtów hosta na numer portu w sieciowej kolejnosci bajtów */ 
        if(bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))<0){  
                error("ERROR on binding");                      /*Bind() wiąże gniazdo z adresem bieżącego hosta i numerem portu, na którym będzie działał serwer, Przyjmuje 3 argumenty: Deskryptor pliku gniazda,adres,rozmiar Adresu*/
        }       
        listen(sockfd,5);  /*Listen umożliwia procesowi nasłuchiwanie w gnieżdzie połączeń, 1 argument to deskryptor gniazda, a drugi to liczba połączeń które mogą czekać podczas gdy proces obsługuje dane połączenie*/
        clilen = sizeof(cli_addr);
        newsockfd = accept(sockfd,(struct sockaddr *)  &cli_addr, &clilen);  /*Accept() powoduje, że proces jest blokowany dopóki klient nie połączy sie z serwerem,1 argumetn to Deskryptor,2 wksaźnik odniesienia do adresu klienta*/
        if(newsockfd<0){
                     error("ERROR on accept");
        }
         bzero(buffer,256);     /*kod inicjuje bufor za pomocą bzero,a następnie odczytuje z gniazda, wywołanie read używa nowego deskryptora pliku*/
         n = read (newsockfd,buffer,255);
         if (n< 0 ){
                  error("ERROR reading from socket");
         }
         printf("Here is the message %s\n",buffer);     /*Po nawiązaniu połączenia oba końce mogą odczytywać i zapisywać połączenie*/
          n = write(newsockfd,"i got your message ",18);
           if (n< 0 ){
                  error("ERROR writning to socket ");
                  }
                                
        return 0;

}

Opis klienta :

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>


void error(char *msg){  /*funkcja wyswietla komunikat o błędzie na stderr i przerywa program */
        perror(msg);
        exit(1);
}

int main(int argc, char *argv[]){

       int sockfd, portno,n; /*zmienne sockfd, newsockfd przechowują wartości zwrócone przez wywołąnie systemowe gniazda i wywołanie Accept . Portno przechowuje numer portu. Clilen przechowuje rozmiar adrsu klienta*/
         struct hostent *server;   /* struktura typu hosten*/
       char buffer[256];    /*Serwer odczytuje znaki z połączenia gniazda do buffora */
        struct sockaddr_in serv_addr, cli_addr;  /*sockaddr_in struktura zawierająca adres internetowy,zmienna serv_addr zawiera adres serwera cli_addr, adrs klienta który łączy sie z serwerem  */
        
        if (argc<3){                              /*użytkownik jako argument musi pdoać numer portu, na którym serwer będzie akceptował połączenia, jeśli tego nie zrobi wyskoczy błąd */
                fprintf(stderr,"Usage %s hostname port\n",argv[0]);
                exit(0);
        }
         portno = atoi(argv[2]);  /* Numer portu*/
        sockfd = socket(AF_INET, SOCK_STREAM, 0);  /*socket() tworzy nowe gniazdo, Pierwszy argument to domena adresowa gniazda,AF_INET to domena internetowa, Drugi argument to typ gniazda, trzeci argument to protokół*/
        if(sockfd<0){                              /* Jeśli wywołanie gnaizda nie powiedzie sie socket() zwróci -1*/
                error("error opening sokcet");
                
        }
        server == gethostbyname(argv[1]);     /*argv[1] zawiera nazwę hosta w internecie */ 
        if(server==NULL){                              /* Jeśli wywołanie gnaizda nie powiedzie sie socket() zwróci -1*/
                fprintf(stderr,"error no such Host\n");
                exit(0);
        }

        bzero((char *) &serv_addr, sizeof(serv_addr));  /*funkcja bzero ustawia wszystkie wartosci w buforze na 0, Pierweszy argument to wskaźnik do bufora a drugi to rozmiar bufora, a drugi to rozmiar buffora, inicjalizuje serv_addr 0 */
                serv_addr.sin_family = AF_INET; /*Zmienna serv_addr jest strukturą typu socakaddr_in, ma ona cztery pola. 1 pole to sin_family,któ©e zawiera kod rodziny adresów, ustawiona jest na stałą AF_INET*/
         bcopy((char *)server->h_addr,         /* bcopy (char* s1, char *s2,int length ) kopiuje bajty długości od s1 do s2*/
        (char*)&serv_addr.sin_addr.s_addr,
        server->h_length);      
                
        serv_addr.sin_port = htons(portno);  /*sin_port zawiera numer portu, funkcja htons konwertuje numer portu w kolejnoscai bajtów hosta na numer portu w sieciowej kolejnosci bajtów */
        if(connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))<0){ /*funkcja connect jest wywyływana przez kilenta w celu nawiązania łączności z serwerem, pobiera 3 argument: deskryptor, adres hosta, rozmiar hosta */ 
                error("ERROR conntecting");                      
        }
   printf("please enter the message"); /* prosi użytkownika o wprowadzenie wiadomości, używa fgets do odczytania wiadomości z stdin, zapisuje do gniazda, odczytuje odpowiedź z gniazda i wyświetla ją na ekranie */   
        bzero(buffer,256); 
        fgets(buffer,255,stdin);
          n = write(sockfd,buffer,strlen(buffer));
            if (n< 0 ){
                  error("ERROR writning to socket ");
         }

            bzero(buffer,256);
              n = read (sockfd,buffer,255);
        if (n< 0 ){
                  error("ERROR reading from socket");
         }
         printf("%s\n",buffer);
      


 return 0;           
}

