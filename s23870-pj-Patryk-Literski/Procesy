Zadanie 1.01

Pisze Program :

#include<unistd.h>
#include<stdio.h>

int main(){
	
printf("PID: %d\t PPID: %d\n", getpid(), getppid());
	
return 0;

}


Zadanie 1.02 

Pisze Program :

#include<unistd.h>
#include<stdio.h>

int main(){

int p;
	
printf("PID: %d\t PPID: %d\n", getpid(), getppid());
	
scanf("%d", &p);
	
return 0;

}



Zadanie 1.03

Pisze Program :

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {

fork();
    
printf("PID: %d, PPID: %d\n", getpid(), getppid());

while(wait(NULL) > 0);

return 0;

}




Zadanie 1.04

Pisze Program :

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char ** argv) {
   
int p = 0;
   
int liczb = 0;
    
int sum;

if(argc != 2) {
       
return 1;
    
}

liczb = atoi(argv[1]);

if(fork() == 0) {
        
printf("Dziecko:  \n");
        
for(p = 1; p <= liczb; p+=2) {
            
printf("%d \n", p);
       
}
   
} else {
        
while(wait(NULL) > 0);

for(p = 0; p <= liczb; p++) {
            
sum += p;
        
}

printf("Rodzic: %d \n", sum);
   
}

return 0;

}



Zadanie 1.05

Pisze Program :

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char **argv){

int numbers = atoi(argv[1]);
    
__pid_t Fork = fork();
    
printf("PID: %d\t PPID: %d\n", getpid(), getppid());
    
int p;
    
if(Fork > 0){
        
int sum = 0;
        
for(p=0; p <= numbers; p++){
            
sum += p;
        
}
        
wait(NULL);
        
printf("Suma %d\n", sum);
    
} else {
        
for(p = 1; p <= numbers; p +=  2)
        
printf("liczba nieparzysta: %d\n", p);
    
}
    
return 0;

}



Zadanie 1.06

Pisze Program : 

#include<unistd.h>
#include<stdio.h>
#include<sys/wait.h>
#include<stdlib.h>

int main(int argc, char **agrv){

int p;
    
for(p=0; p<10; p++){
        
pid_t pid = fork();
        
if(pid()==0)
            
printf("PID: %d\t PPID: %d\n", p, getpid(), getppid());
        
 else {
            
wait(NULL);
            
printf("%d rodzic nie czeka! PID: %d\n", p, getpid());
            
break;

}

}    
    
return 0;

}
